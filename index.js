require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const path = require("path");
const fs = require("fs");
const fetch = require("node-fetch");
const NodeID3 = require("node-id3");
const ffmpeg = require("fluent-ffmpeg");
const ffmpegPath = require("ffmpeg-static");
const surahs = require("./quran.json");

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –¥–ª—è ffmpeg
ffmpeg.setFfmpegPath(ffmpegPath);

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHANNEL_ID = process.env.CHANNEL;
const TEMP_FOLDER = "./temp";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(TEMP_FOLDER)) {
  fs.mkdirSync(TEMP_FOLDER);
}

// –£—Ç–∏–ª–∏—Ç—ã
function toHashtag(str) {
  return (
    "#" +
    str
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s]/gi, "")
      .trim()
      .split(/\s+/)
      .filter(Boolean)
      .join("#")
  );
}

function clearTempFolder() {
  fs.readdirSync(TEMP_FOLDER).forEach((file) => {
    fs.unlinkSync(path.join(TEMP_FOLDER, file));
  });
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const currentData = {
  mode: "", // 'hussary' –∏–ª–∏ 'regular'
  track: "",
  text: "",
  artist: "Mahmoud Al-Hosary",
  color: "",
  audioPath: "",
  message: "",
  title: "",
  tags: {}
};

// –ö–æ–º–∞–Ω–¥—ã
bot.command("start", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", {
    ...Markup.inlineKeyboard([
      [Markup.button.callback("–†–µ–∂–∏–º –ö–æ—Ä–∞–Ω–∞ (–•—É—Å–∞—Ä–∏)", "mode_hussary")],
      [Markup.button.callback("–†–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –∞—É–¥–∏–æ", "mode_regular")]
    ])
  });
});

bot.command("surah", (ctx) => {
  if (currentData.mode !== "hussary") {
    return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –ö–æ—Ä–∞–Ω–∞ (–•—É—Å–∞—Ä–∏)");
  }
  const newTrack = ctx.message.text.replace("/surah", "").trim();
  if (newTrack && !isNaN(newTrack)) {
    currentData.track = newTrack;
    ctx.reply(`–ù–æ–º–µ—Ä —Å—É—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${newTrack}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—É—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/surah 5`", {
      parse_mode: "Markdown",
    });
  }
});

bot.command("artist", (ctx) => {
  const newArtist = ctx.message.text.replace("/artist", "").trim();
  if (newArtist) {
    currentData.artist = newArtist;
    ctx.reply(`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${newArtist}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/artist Artist Name`");
  }
});

bot.command("title", (ctx) => {
  if (currentData.mode !== "regular") {
    return ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ");
  }
  const newTitle = ctx.message.text.replace("/title", "").trim();
  if (newTitle) {
    currentData.title = newTitle;
    ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: "${newTitle}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/title Song Name`");
  }
});

bot.command("clear_all", (ctx) => {
  Object.assign(currentData, { 
    mode: "",
    track: "", 
    text: "", 
    color: "", 
    audioPath: "", 
    message: "",
    title: "",
    artist: "Mahmoud Al-Hosary",
    tags: {}
  });
  ctx.reply("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!");
  clearTempFolder();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤
bot.action("mode_hussary", async (ctx) => {
  currentData.mode = "hussary";
  currentData.artist = "Mahmoud Al-Hosary";
  await ctx.editMessageText("–†–µ–∂–∏–º –ö–æ—Ä–∞–Ω–∞ (–•—É—Å–∞—Ä–∏) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ:\n1. –ù–æ–º–µ—Ä —Å—É—Ä—ã (/surah –Ω–æ–º–µ—Ä)\n2. –ù–æ–º–µ—Ä –∞—è—Ç–∞ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç)\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏–æ");
});

bot.action("mode_regular", async (ctx) => {
  currentData.mode = "regular";
  await ctx.editMessageText("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ:\n1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (/title –Ω–∞–∑–≤–∞–Ω–∏–µ)\n2. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (/artist –∏–º—è)\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –Ω–æ–º–µ—Ä–∞ –∞—è—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –•—É—Å–∞—Ä–∏)
bot.on("text", (ctx) => {
  if (ctx.message.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  
  if (currentData.mode === "hussary") {
    const newText = ctx.message.text.trim();
    if (newText) {
      currentData.text = newText;
      ctx.reply(`–ù–æ–º–µ—Ä –∞—è—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${newText}"`);
    } else {
      ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (—Ä–µ–∂–∏–º –•—É—Å–∞—Ä–∏)
bot.on("video", async (ctx) => {
  try {
    if (currentData.mode !== "hussary") return;
    
    if (!currentData.track || !currentData.text) {
      return ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞:\n- –ù–æ–º–µ—Ä —Å—É—Ä—ã (`/surah`)\n- –ù–æ–º–µ—Ä –∞—è—Ç–∞ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç)",
      );
    }
    
    let message = await ctx.reply('‚è≥');

    const video = ctx.message.video;
    const fileLink = await ctx.telegram.getFileLink(video.file_id);
    const inputVideoPath = path.join(TEMP_FOLDER, `input_${video.file_id}.mp4`);
    const outputAudioPath = path.join(TEMP_FOLDER, `audio_${video.file_id}.mp3`);

    const response = await fetch(fileLink.href);
    fs.writeFileSync(inputVideoPath, await response.buffer());

    await new Promise((resolve, reject) => {
      ffmpeg(inputVideoPath)
        .output(outputAudioPath)
        .noVideo()
        .on("end", resolve)
        .on("error", reject)
        .run();
    });

    const surahInfo = surahs[Number(currentData.track) - 1] || {};
    currentData.tags = {
      title: `Surah ${currentData.track} ${surahInfo.name_en || "Unknown"} (${currentData.text})`,
      artist: currentData.artist,
      year: new Date().getFullYear(),
    };

    NodeID3.write(currentData.tags, outputAudioPath, (err) => {
      if (err) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ID3 —Ç–µ–≥–æ–≤.");
    });

    currentData.audioPath = outputAudioPath;
    await ctx.deleteMessage(message.message_id);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:", {
      ...Markup.inlineKeyboard([
        ["üîµ", "üü¢", "üî¥", "üü°"].map((emoji) => Markup.button.callback(emoji, `color_${emoji}`)),
        ["üü£", "üü†", "üü•"].map((emoji) => Markup.button.callback(emoji, `color_${emoji}`)),
      ]),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.");
    clearTempFolder();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
bot.on("audio", async (ctx) => {
  try {
    if (currentData.mode !== "regular") return;
    
    if (!currentData.title || !currentData.artist) {
      return ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (/title) –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (/artist) –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –∞—É–¥–∏–æ",
      );
    }
    
    let message = await ctx.reply('‚è≥');

    const audio = ctx.message.audio;
    const fileLink = await ctx.telegram.getFileLink(audio.file_id);
    const audioPath = path.join(TEMP_FOLDER, `audio_${audio.file_id}.mp3`);

    const response = await fetch(fileLink.href);
    fs.writeFileSync(audioPath, await response.buffer());

    currentData.tags = {
      title: currentData.title,
      artist: currentData.artist,
      year: new Date().getFullYear(),
    };

    NodeID3.write(currentData.tags, audioPath, (err) => {
      if (err) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ID3 —Ç–µ–≥–æ–≤.");
    });

    currentData.audioPath = audioPath;
    currentData.message = `${currentData.artist} - ${currentData.title}`;
    await ctx.deleteMessage(message.message_id);

    await ctx.replyWithAudio(
      {
        source: currentData.audioPath,
        filename: `${currentData.artist} - ${currentData.title}.mp3`,
      },
      {
        caption: `${currentData.message}`,
        ...Markup.inlineKeyboard([
          Markup.button.callback("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "send_audio"),
          Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_audio"),
        ]),
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.");
    clearTempFolder();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ (—Ä–µ–∂–∏–º –•—É—Å–∞—Ä–∏)
bot.action(/color_(.+)/, async (ctx) => {
  try {
    await ctx.deleteMessage();

    const colorAction = ctx.match[1];
    currentData.color = colorAction;

    const surahInfo = surahs[Number(currentData.track) - 1] || {};
    currentData.message = `${colorAction} –°—É—Ä–∞ ${currentData.track} ¬´${surahInfo.name_en} (${surahInfo.name_ru}), ${(currentData.text.includes("-")) ? "–∞—è—Ç—ã" : "–∞—è—Ç"} ${currentData.text}¬ª - –ú–∞—Ö–º—É–¥ –ê–ª—å-–•—É—Å–∞—Ä–∏\n\n#–∫–æ—Ä–∞–Ω ${toHashtag(surahInfo.name_en)}`;

    await ctx.replyWithAudio(
      {
        source: currentData.audioPath,
        filename: `${currentData.artist} - ${surahInfo.name_en} - ${currentData.text}.mp3`,
      },
      {
        caption: `${currentData.message}`,
        ...Markup.inlineKeyboard([
          Markup.button.callback("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "send_audio"),
          Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_audio"),
        ]),
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
bot.action("send_audio", async (ctx) => {
  try {
    await ctx.deleteMessage();
    if (!currentData.audioPath) return ctx.reply("–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!");

    await bot.telegram.sendAudio(CHANNEL_ID, {
      source: currentData.audioPath,
      filename: path.basename(currentData.audioPath),
    }, {
      caption: `${currentData.message}`,
    });

    ctx.reply("–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
    clearTempFolder();
    Object.assign(currentData, { 
      track: "", 
      text: "", 
      color: "", 
      audioPath: "", 
      message: "",
      title: "",
      tags: {}
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ:", err);
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.");
  }
});

// –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
bot.action("cancel_audio", async (ctx) => {
  await ctx.deleteMessage();
  await ctx.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  clearTempFolder();
  Object.assign(currentData, { 
    audioPath: "", 
    color: "", 
    text: "", 
    track: "",
    title: "",
    message: "",
    tags: {}
  });
});

bot.launch().then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));
