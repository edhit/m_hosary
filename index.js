require('dotenv').config();
const { Telegraf, Markup } = require("telegraf");
const path = require("path");
const fs = require("fs");
const fetch = require("node-fetch");
const NodeID3 = require("node-id3");
const ffmpeg = require("fluent-ffmpeg");
const ffmpegPath = require("ffmpeg-static");
const surahs = require('./quran.json');

// –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;

const channel = process.env.CHANNEL;

const bot = new Telegraf(BOT_TOKEN);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg
ffmpeg.setFfmpegPath(ffmpegPath);

// –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const TEMP_FOLDER = "./temp";

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(TEMP_FOLDER)) {
  fs.mkdirSync(TEMP_FOLDER);
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
// let currentTitle = "";
let currentArtist = "";
let currentTrack = ""; // –¢—Ä–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let currentText = ""; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
let processedAudioPath = ""; // –ü—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ
let color = ""

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
const clearTempFolder = () => {
  const files = fs.readdirSync(TEMP_FOLDER);
  files.forEach((file) => {
    const filePath = path.join(TEMP_FOLDER, file);
    try {
      fs.unlinkSync(filePath);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, err);
    }
  });
};

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è title
// bot.command("set_title", (ctx) => {
//   const newTitle = ctx.message.text.replace("/set_title ", "").trim();
//   if (newTitle) {
//     currentTitle = newTitle;
//     ctx.reply(`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: "${currentTitle}"`);
//   } else {
//     ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/set_title –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`", { parse_mode: "Markdown" });
//   }
// });

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è artist
bot.command("set_artist", (ctx) => {
  const newArtist = ctx.message.text.replace("/set_artist ", "").trim();
  if (newArtist) {
    currentArtist = newArtist;
    ctx.reply(`–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${currentArtist}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ —Ç—Ä–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/set_artist –ù–æ–≤—ã–π –∞–≤—Ç–æ—Ä`", { parse_mode: "Markdown" });
  }
});

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è track
bot.command("set_track", (ctx) => {
  const newTrack = ctx.message.text.replace("/set_track ", "").trim();
  if (newTrack && !isNaN(newTrack)) {
    currentTrack = newTrack;
    ctx.reply(`–ù–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${currentTrack}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/set_track 5`", { parse_mode: "Markdown" });
  }
});

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
bot.on("text", (ctx) => {
  const newText = ctx.message.text.trim();
  if (newText) {
    currentText = newText;
    ctx.reply(`–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: "${currentText}"`);
  } else {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
  }
});

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
bot.command("clear_all", (ctx) => {
//   currentTitle = "";
  currentArtist = "";
  currentTrack = "";
  currentText = "";
  color = "";
  ctx.reply("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!");
});

// –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
bot.on("video", async (ctx) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (!currentArtist || !currentTrack || !currentText) {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–∞:\n- –ê–≤—Ç–æ—Ä (`/set_artist`)\n- –ù–æ–º–µ—Ä —Å—É—Ä—ã (`/set_track`)\n- –ù–æ–º–µ—Ä –∞—è—Ç–∞ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)");
      return;
    }

    const video = ctx.message.video;

    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileLink = await ctx.telegram.getFileLink(video.file_id);
    const inputVideoPath = path.join(TEMP_FOLDER, `input_${video.file_id}.mp4`);
    const outputAudioPath = path.join(TEMP_FOLDER, `audio_${video.file_id}.mp3`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    const response = await fetch(fileLink.href);
    const buffer = await response.buffer();
    fs.writeFileSync(inputVideoPath, buffer);

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
    await new Promise((resolve, reject) => {
      ffmpeg(inputVideoPath)
        .output(outputAudioPath)
        .noVideo() // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        .on("end", resolve)
        .on("error", reject)
        .run();
    });

    // –ù–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const tags = {
      title: `Surah ${currentTrack} ${surahs[Number(currentTrack) - 1].name_en}(${currentText})`,
      artist: currentArtist,
      year: new Date().getFullYear(),
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    NodeID3.write(tags, outputAudioPath, (err) => {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ID3 —Ç–µ–≥–æ–≤:", err);
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞.");
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
    processedAudioPath = outputAudioPath;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º:", {
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîµ", "color_blue"), Markup.button.callback("üü¢", "color_green")],
        [Markup.button.callback("üî¥", "color_red"), Markup.button.callback("üü°", "color_yellow")],
        [Markup.button.callback("üü£", "color_purple"), Markup.button.callback("üü†", "color_orange")],
        [Markup.button.callback("üü•", "color_darkred")],
      ]),
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.");
    clearTempFolder(); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
});

// –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
const colors = {
  color_blue: "üîµ",
  color_green: "üü¢",
  color_red: "üî¥",
  color_yellow: "üü°",
  color_purple: "üü£",
  color_orange: "üü†",
  color_darkred: "üü•",
};

Object.keys(colors).forEach((colorAction) => {
  bot.action(colorAction, async (ctx) => {
    color = colorAction

    await ctx.editMessageText(`${colors[color]} –°—É—Ä–∞ ${currentTrack} ¬´${surahs[Number(currentTrack) - 1].name_en} (${surahs[Number(currentTrack) - 1].name_ru}), ${currentText}¬ª –ú–∞—Ö–º—É–¥ –ê–ª—å-–•—É—Å–∞—Ä–∏`)

    await ctx.replyWithAudio({
        source: processedAudioPath,
        filename: `${currentArtist} - ${surahs[Number(currentTrack) - 1].name_en} - ${currentText}.mp3`,
      }, {
        caption: `${colors[color]} –°—É—Ä–∞ ${currentTrack} ¬´${surahs[Number(currentTrack) - 1].name_en} (${surahs[Number(currentTrack) - 1].name_ru}), ${currentText}¬ª –ú–∞—Ö–º—É–¥ –ê–ª—å-–•—É—Å–∞—Ä–∏ \n\n –û—Ç–ø—Ä–∞–≤–∏—Ç—å?`,
        ...Markup.inlineKeyboard([
            Markup.button.callback("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", "send_audio"),
            Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_audio"),
          ]),
      });
  });
});

// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
bot.action("send_audio", async (ctx) => {
  try {
    if (processedAudioPath) {
      await bot.telegram.sendAudio(channel, {
        source: processedAudioPath,
        filename: `${currentArtist} - ${surahs[Number(currentTrack) - 1].name_en} - ${currentText}.mp3`,
      }, {
        caption: `${colors[color]} –°—É—Ä–∞ ${currentTrack} ¬´${surahs[Number(currentTrack) - 1].name_en} (${surahs[Number(currentTrack) - 1].name_ru}), ${currentText}¬ª –ú–∞—Ö–º—É–¥ –ê–ª—å-–•—É—Å–∞—Ä–∏`
      });
      await ctx.deleteMessage();
      clearTempFolder(); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      processedAudioPath = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
      currentText = "";
      color = "";
    } else {
      await ctx.reply("–ù–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ:", err);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.");
  }
});

// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
bot.action("cancel_audio", async (ctx) => {
  await ctx.editMessageText("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  clearTempFolder(); // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  processedAudioPath = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  currentText = "";
  color = "";
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"));
